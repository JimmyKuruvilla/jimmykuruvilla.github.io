<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Not A Programming Joke]]></title>
  <link href="http://JimmyKuruvilla.github.io/atom.xml" rel="self"/>
  <link href="http://JimmyKuruvilla.github.io/"/>
  <updated>2014-12-17T12:14:05-05:00</updated>
  <id>http://JimmyKuruvilla.github.io/</id>
  <author>
    <name><![CDATA[Jimmy Kuruvilla]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[VMachine]]></title>
    <link href="http://JimmyKuruvilla.github.io/blog/2014/12/01/vmachine/"/>
    <updated>2014-12-01T20:45:41-05:00</updated>
    <id>http://JimmyKuruvilla.github.io/blog/2014/12/01/vmachine</id>
    <content type="html"><![CDATA[<p>When I first started at the Flatiron School I got more than a few stares for using a PC. In fact for a place that otherwise espoused tolerance and a positive attitude, the feelings toward PCs were definitely more downward facing dog than rising eagle. To me this was a shock, the arguments against MACs were obvious - overly expensive, upgrades require a &ldquo;genius&rdquo;, used to not even run on x86 processors, have to pay for every single thing that is available as open source, and you can&rsquo;t play (as many/recent) games!</p>

<p>After watching 40 students handle their Macs as development machines I will admit that there is a sexiness to newer Macbooks, and you definitely get what you pay for in terms of screen resolution, and who can argue that having the OS just work isn&rsquo;t something that you would want? For simplicity, The Flatiron School insists that you use a Mac. I used a linux  and Win 8 dual boot machine for most of my time there because they hadn&rsquo;t outright said I couldn&rsquo;t, and becuase I already owned one.</p>

<h3>How did it go?</h3>

<p>It was a major victory for proving it can be done. It was a minor hassle in terms of having to jump through a few more hoops on a curriculum designed for Macs. Some custom Flatiron gems needed tweaks to work, or Postgres had additional dependencies, or shortcuts in Sublime aren&rsquo;t the same. All in all it wasn&rsquo;t game breaking stuff, and I still prefer that I used a laptop I had ($500) over buying a new one ($2000) in an eco-system I had no intention of participating in. As we neared the end of the term I realized however that I was missing out on a third option : virtualization.</p>

<!-- more -->


<h3>Why Virtualize?</h3>

<p>Running an OS and development environment in a virtual machine has mostly ups, but also a few downs.</p>

<h4>The Ups:</h4>

<ol>
<li><p>All your IDE/text editor settings, custom bash shortcuts, gems, ruby installations managed with RVM, file structure, apps you&rsquo;ve built, custom scripts etc. etc. are saved in the VM. My Kubuntu 14.04 (LTS) install + tools is about 23 GB. This includes everything I need to build Rails apps - sublime text, chrome, GIMP etc. Today that is TINY. I save mine to a external drive every few days. That means even if I lost my entire machine, I could set up for work on a new machine in literally the time it takes to copy over - about 10 min. In fact, when I can&rsquo;t use my laptop because I forgot it at school, I&rsquo;ve booted up the VM on my home machine and seamlessly resumed work.</p></li>
<li><p>No messing around with Wine or other nonsense to get Windows only tools to work. Just jump to Windows, do your Autocad or whatever and come right back.</p></li>
<li><p>You don&rsquo;t have to dual boot. If you need Windows (I know I know, no one needs Windows), but say you needed Windows (to play Starcraft, Skyrim, or some LoL let&rsquo;s say), by using a VM you can just drop out and be in Windows. No rebooting at all. And obviously if you wanted to run a VM session of OS X inside OS X to isolate your dev environment, I&rsquo;m pretty sure that wouldn&rsquo;t be too hard to do either.</p></li>
</ol>


<h4>The Downs:</h4>

<ol>
<li><p>The clock took a while to sync correctly with the host system. Sometimes it&rsquo;s still off, but can be corrected manually. Strangely enough on Github, times for commits etc. are based on local machine time, so this can be off putting.</p></li>
<li><p>Keyboard repeat settings may need tweaking. Every so often I find myself with a few keystrokes I didn&rsquo;t type, and it occurs more often in lower power (lower CPU) states.</p></li>
<li><p>Sharing files between the host and the guest machines can be a little fiddly. If you have a lot of data to transfer back and forth a specialized shared partition may make sense. I have a 30GB FAT32 partition shared between Windows (NTFS) and Ubuntu (EXT3). When mounted with CIFS the FAT32 permissions issue where everything shows up as executable are resolved, but you do still have the 4GB file size limit - I&rsquo;m not editing video so that hasn&rsquo;t been a problem. For smaller amounts of data or if you just can&rsquo;t be bothered, Github or Dropbox might be a more sensible solution.</p></li>
<li><p>Getting 3D acceleration for Compiz effects and the like were a little more than fiddly but doable. You can live without it, but it does detract from the experience to have this be choppy, so it&rsquo;s worth doing right.</p></li>
<li><p>Virtualization costs RAM and CPU cores. I have a quad core machine with 6GB of RAM and an AMD APU. The development enviroment gets 2 cores and 2 GB of RAM and hasn&rsquo;t stuttered yet. On a single core and 1GB of RAM, this still work satisfactorily, though I feel like I can tell the difference.</p></li>
</ol>


<p>So do it! It&rsquo;s worth a little hassle to never be left in the dark, and to always have all your options open.</p>

<p>In the end I went with VMWare over Virtual Box - only because 3D acceleration was not working right on Virtual Box.  I also initially tried using a VMWare converter to take the original Linux install and convert it to a VM. This worked well, but again I could not figure out the 3D acceleration thing  so I went with a fresh install.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git-Dash]]></title>
    <link href="http://JimmyKuruvilla.github.io/blog/2014/11/22/git0-dash/"/>
    <updated>2014-11-22T22:33:55-05:00</updated>
    <id>http://JimmyKuruvilla.github.io/blog/2014/11/22/git0-dash</id>
    <content type="html"><![CDATA[<p>At the Flatiron School (FI) we&rsquo;re required to present at least one technical talk. Not to be outdone by classmates most people go all out with the knowledge they have at the time. My partner and I decided to build a dashboard with the help of DashingIO (<a href="http://dashing.io/">http://dashing.io/</a>).</p>

<p>We wanted to build a dashboard that could be accessed by the students individually and on the big screens around the lab area. Dashing IO provided both of these features out of the box.</p>

<p>We wanted to show
1. what new blogs have been posted?
2. is there anything fun to do later? and
3. how am I doing on labs?</p>

<!-- more -->


<p>The first was accomplished in name, the second was ignored completely, and the third question took most of our limited time. Labs are assignments given by the FI instructors. Each lab is a source of its own anxiety for each student. The one thing students don&rsquo;t want to be is behind other students on labs. So we thought our dashoard would help them realize they were travelling with the pack instead of trailing it.</p>

<p>I&rsquo;ll say right now that we learned a lot and didn&rsquo;t really know what we were undertaking at the time.</p>

<p>Instead of noting what worked, I&rsquo;d like to point out what we didn&rsquo;t do right since that&rsquo;s where most of the really good lessons came from:</p>

<ol>
<li><p>We didn&rsquo;t start with object orientation and we kept pushing forward with procedural code. Reusing any of this code would require a lot of familiartiy with the project, and it&rsquo;s quite ugly to read. A little OO would have gone a lOOng way.</p></li>
<li><p>The major feature of our app is that it shows users where the group is on &lsquo;labs&rsquo; or &lsquo;assignments&rsquo; on GitHub. Our app updates a graph with forks and pull requests indicating starts and finshes of labs.  Our app authenticates as a particular user of the organization that includes all of our assignments: &ldquo;flatiron-school-labs&rdquo;. And then it foolishly requests all pulls made to each repository, and then all forks made to each repository. Each of those is a separate request and slows the app as you would expect. We realized too late that making those requests concurrently would have sped things up significantly.</p></li>
<li><p>We didn&rsquo;t cache data or ask the GitHub server if the data had changed? Checking if the current query&rsquo;s results are the same as the last set of results doesn&rsquo;t count against our API request limit, and would have been the right thing to do as decent &ldquo;api citizens.&rdquo;</p></li>
<li><p>And of course instead of checking for pulls and forks every scheduler cycle, we could have just been notified by the GitHubAPI when something changed, via the GitHub Notifications API. Unfortunately we would need to authenticate as a user that was subscribed/watching each repository to be able to do this. As students only partially through the program, subscribing to every repo seemed silly.</p></li>
<li><p>We relied too heavily on Dashing IO to handle graph widget creation. Dashing IO relies on D3, and futzing around with the coffeescript examples provided was a huge pain. If we were to do it again, we&rsquo;d go straight to D3&hellip;in fact we&rsquo;d skip Dashing IO and roll our own layout and javascript featureset.</p></li>
</ol>


<p>Here is a link to the video of us demoing the app.
<a href="https://www.youtube.com/watch?v=RnR_riRvCWI">Git/IronDash-Demo</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dishes]]></title>
    <link href="http://JimmyKuruvilla.github.io/blog/2014/11/10/dishes/"/>
    <updated>2014-11-10T21:58:45-05:00</updated>
    <id>http://JimmyKuruvilla.github.io/blog/2014/11/10/dishes</id>
    <content type="html"><![CDATA[<p>The following isn&rsquo;t strictly programming related, but I learned some things that I make sure to remember while programming so I thought I would share it.</p>

<p>A few apartments ago my wife and I had our first son, Eli. Very quickly I got tired of washing a thousand baby bottles by hand every day and so I looked for and found a dishwasher on Craigslist. I had a very narrow kitchen without the possibility of installing a dishwasher so I needed a mobile one. In fact, the person I bought it from thought their dishwasher was broken, so they were giving it away. It had recently been serviced and the main motor had been replaced. The owners were frustrated that it still didn&rsquo;t work and were unwilling to spend any more money on it. I was more willing to gamble my time back then, so I went ahead and got a free dishwasher.</p>

<!-- more -->


<h2>Mistake number 1: I turned it on and tried to run a cycle and the bottom started leaking water and the cycle never started. I dripped water all over the kitchen floor and had to explain why I was even bothering with a &ldquo;broken&rdquo; dishwasher.</h2>

<p>I opened up the dishwasher and  learned a bunch of things but two were notable:</p>

<ol>
<li><p>What prevents a mobile dishwasher from tipping when the trays are full of plates and you pull them all the way out? Apparently it&rsquo;s a giant T-shaped counter-weight made of concrete, wrapped in bubble wrap for&hellip;cushioning I guess. If I had known that  most of the weight came from a single, dense piece of concrete, I would have dissasembled the whole thing before I dragged it up to my 2nd floor walk up apartment.</p></li>
<li><p>Nothing was wrong with the dishwasher except that the electrical connection to the motor and the control system was not securely attached. The technician that serviced it must have thought everything was working when he left, and then the connection must have come loose - during all the mobile activities a dishwasher like this one experiences. You know how it is.</p></li>
</ol>


<p>I ordered a new sink connection hose attachment and a new motor power connector and in a few days I had a working dishwasher! Great success!</p>

<h2>Lesson: Don&rsquo;t start a broken dishwasher without a pan/towel to catch the potential leaking water. And more importantly don&rsquo;t give up because other people claim something is broken.   Sometimes it&rsquo;s good to see for yourself.</h2>

<h2>Mistake number 2: Building something that already exists&hellip;and not just for practice</h2>

<p>This new (old) dishwasher only had one caster remaining, so it wasn&rsquo;t nearly as mobile as I needed. I figured I&rsquo;ll just put it on a dolly and wheel it around. But where to get a dolly this size? It has to be strong, and just the right size, otherwise&hellip;broken dishes could occur! So I decided to build one. I measured the base, laid out a plan on paper, went to Home Depot, bought the wood, casters and screws, and then put it together in a short afternoon. I was so incredibly proud of my custom dolly I told my wife to give me extra husband points for not only finding the free dishwasher and making it work, but for also building a custom dolly.</p>

<p>My friend Tim pointed out that I could have just bought one at Home Depot, and that they came in different sizes. I told him that he was a wise man, and that I would heed his advice in future. I also cursed his first-born. I&rsquo;ve included a picture of my mega-dolly below. It doesn&rsquo;t show the wheels, but it is on a fancy carpet.</p>

<p><img src="http://JimmyKuruvilla.github.io/images/mega-dolly.jpg" alt="mega-dolly" /></p>

<h2>Lesson: Always google/discuss your ideas before you get started. Someone may have already solved your problem for you.  Everything you create will always be built on the hard work of those who came before you (tools, designs, best-practices etc.) so don&rsquo;t re-invent the wheel.</h2>

<p>When I moved to a new place with a dishwasher, I ended up paying mine forward to a friend who was in the same bottle-hell that I was. I still have the dolly and I don&rsquo;t use it for anything at all.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What Happens When You Grow a Database Sideways?]]></title>
    <link href="http://JimmyKuruvilla.github.io/blog/2014/10/30/what-happens-when-you-grow-a-database-with-columns/"/>
    <updated>2014-10-30T17:32:09-04:00</updated>
    <id>http://JimmyKuruvilla.github.io/blog/2014/10/30/what-happens-when-you-grow-a-database-with-columns</id>
    <content type="html"><![CDATA[<p>The short answer is that it gets slow. I had heard this before but decided to confirm it with some code. I used SQLite for the database, ActiveRecord to ease the SQL work, and Ruby to automate table generation. Tables of sizes from 100 to 1000 columns and rows were created and populated, and then randomly queried 100 times per benchmark. The benchmarks were averaged and compiled to generate the summary chart.  To keep things simple, I only tested a single column of 1000 records, or a single row with 1000 attributes (columns).</p>

<!-- more -->


<p>The code for the helper methods:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;benchmark&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s2">&quot;./config/environment.rb&quot;</span>
</span><span class='line'><span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span><span class="o">.</span><span class="n">logger</span> <span class="o">=</span> <span class="no">Logger</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;./log&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">destroy_db</span>
</span><span class='line'>    <span class="sb">`rm &quot;db/halloween_development.sqlite&quot;`</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">migrate_db</span>
</span><span class='line'>  <span class="sb">`rake db:migrate`</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">bench_the_block</span><span class="p">(</span><span class="n">num</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
</span><span class='line'>    <span class="no">Benchmark</span><span class="o">.</span><span class="n">bmbm</span> <span class="k">do</span> <span class="o">|</span><span class="n">x</span><span class="o">|</span>
</span><span class='line'>      <span class="n">x</span><span class="o">.</span><span class="n">report</span> <span class="k">do</span>
</span><span class='line'>        <span class="n">num</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span>
</span><span class='line'>          <span class="n">block</span><span class="o">.</span><span class="n">call</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">create_migrations</span><span class="p">(</span><span class="n">num_attribs</span><span class="p">,</span>  <span class="n">model_name</span><span class="p">)</span><span class="c1">#model name plural</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="n">model_name</span><span class="o">==</span><span class="s2">&quot;candies&quot;</span>
</span><span class='line'>  <span class="sb">`rm &quot;db/migrate/01_create_</span><span class="si">#{</span><span class="n">model_name</span><span class="si">}</span><span class="sb">.rb&quot;`</span>
</span><span class='line'>    <span class="n">f</span><span class="o">=</span><span class="no">File</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="s2">&quot;./db/migrate/01_create_</span><span class="si">#{</span><span class="n">model_name</span><span class="si">}</span><span class="s2">.rb&quot;</span><span class="p">,</span> <span class="s2">&quot;w&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>  <span class="sb">`rm &quot;db/migrate/02_create_</span><span class="si">#{</span><span class="n">model_name</span><span class="si">}</span><span class="sb">.rb&quot;`</span>
</span><span class='line'>    <span class="n">f</span><span class="o">=</span><span class="no">File</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="s2">&quot;./db/migrate/02_create_</span><span class="si">#{</span><span class="n">model_name</span><span class="si">}</span><span class="s2">.rb&quot;</span><span class="p">,</span> <span class="s2">&quot;w&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">table_attributes</span><span class="o">=</span><span class="s2">&quot;&quot;</span>
</span><span class='line'>  <span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="n">.num_attribs</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">num</span><span class="o">|</span>
</span><span class='line'>    <span class="n">table_attributes</span> <span class="o">+=</span> <span class="s2">&quot;t.string :&#39;</span><span class="si">#{</span><span class="n">num</span><span class="si">}</span><span class="s2">&#39;</span><span class="se">\n</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">f</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="s2">&quot;&quot;&quot;class Create</span><span class="si">#{</span><span class="n">model_name</span><span class="o">.</span><span class="n">capitalize</span><span class="si">}</span><span class="s2"> &lt; ActiveRecord::Migration</span>
</span><span class='line'><span class="s2">            def change</span>
</span><span class='line'><span class="s2">            create_table :</span><span class="si">#{</span><span class="n">model_name</span><span class="si">}</span><span class="s2"> do |t|</span>
</span><span class='line'><span class="s2">              </span><span class="si">#{</span><span class="n">table_attributes</span><span class="si">}</span><span class="s2"></span>
</span><span class='line'><span class="s2">            end</span>
</span><span class='line'><span class="s2">          end</span>
</span><span class='line'><span class="s2">        end</span>
</span><span class='line'><span class="s2">        &quot;&quot;&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">f</span><span class="o">.</span><span class="n">close</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">migrate_db</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">populate</span><span class="p">(</span><span class="n">num_columns</span><span class="p">,</span> <span class="n">model_name</span><span class="p">,</span> <span class="n">mode</span><span class="p">)</span><span class="c1">#model name singular</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">m</span><span class="o">=</span><span class="no">Class</span><span class="o">.</span><span class="n">const_get</span><span class="p">(</span><span class="n">model_name</span><span class="o">.</span><span class="n">capitalize</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">mode</span><span class="o">==</span><span class="s2">&quot;horizontal&quot;</span>
</span><span class='line'>    <span class="n">m</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="s2">&quot;1&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;x&quot;</span><span class="p">)</span> <span class="c1">#House.create(&quot;1&quot; =&gt; &quot;x&quot;)</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="n">.num_columns</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">num</span><span class="o">|</span>
</span><span class='line'>      <span class="n">m</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span><span class="o">.</span><span class="n">update</span><span class="p">(</span><span class="s2">&quot;</span><span class="si">#{</span><span class="n">num</span><span class="si">}</span><span class="s2">&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">num</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">elsif</span> <span class="n">mode</span><span class="o">==</span><span class="s2">&quot;vertical&quot;</span>
</span><span class='line'>      <span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="n">.num_columns</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">num</span><span class="o">|</span>
</span><span class='line'>      <span class="n">m</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="s2">&quot;1&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">num</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="n">num</span><span class="o">=</span><span class="mi">1000</span><span class="c1">#number of columns or rows</span>
</span><span class='line'><span class="n">times</span><span class="o">=</span><span class="mi">100</span><span class="c1">#number of times to run the benchmark</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c1"># destroy_db</span>
</span><span class='line'><span class="c1"># create_migrations(num, &quot;houses&quot;)#houses</span>
</span><span class='line'><span class="c1"># populate(num, &quot;house&quot;, &quot;horizontal&quot;)</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># create_migrations(1, &quot;candies&quot;)w</span>
</span><span class='line'><span class="c1"># populate(num, &quot;candy&quot;, &quot;vertical&quot;)</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># puts &quot;Random lookups at #{num} columns&quot;</span>
</span><span class='line'><span class="c1"># bench_the_block(times){z=rand(1..num); House.find_by(&quot;#{z}&quot;=&gt;z)}</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># puts &quot;Random lookups at #{num} rows&quot;</span>
</span><span class='line'><span class="c1"># bench_the_block(times){Candy.find_by(&quot;1&quot; =&gt; &quot;#{rand(1..num)}&quot;)}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Summary</h2>

<p>SQLite3 has a default column limit of 2000! So I wasn&rsquo;t able to get to the millions of columns I wanted to try. This can be changed but only to about 35k columns. Cursory review of stack overflow indicates that having a database with more than a 100 columns is usually a design flaw with the database.</p>

<p><img class="left" src="http://JimmyKuruvilla.github.io/images/SQLITE_chart.png" width="500" height="400" title="image" alt="images"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby: Inject/Reduce Method]]></title>
    <link href="http://JimmyKuruvilla.github.io/blog/2014/10/08/testing/"/>
    <updated>2014-10-08T21:54:40-04:00</updated>
    <id>http://JimmyKuruvilla.github.io/blog/2014/10/08/testing</id>
    <content type="html"><![CDATA[<h4>Ruby has an Enumerable method called inject and it makes summing or getting the product of an array of values a snap. Below are some extended examples of it in use:</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">#&#39;injects&#39; 0 in for sum before we start summing so </span>
</span><span class='line'><span class="c1">#the result is 1+1+1</span>
</span><span class='line'><span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="o">].</span><span class="n">inject</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="p">{</span><span class="o">|</span><span class="n">sum</span><span class="p">,</span> <span class="n">value</span><span class="o">|</span> <span class="n">sum</span><span class="o">+</span><span class="n">value</span><span class="p">}</span>
</span><span class='line'><span class="c1">#&#39;injects&#39; a value of 1 in for sum before we start summing so </span>
</span><span class='line'><span class="c1">#the result is 1+1+1+1=4</span>
</span><span class='line'><span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="o">].</span><span class="n">inject</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span><span class="o">|</span><span class="n">sum</span><span class="p">,</span> <span class="n">value</span><span class="o">|</span> <span class="n">sum</span><span class="o">+</span><span class="n">value</span><span class="p">}</span>
</span><span class='line'><span class="c1">#nothing injected, so the first argument (sum) takes the </span>
</span><span class='line'><span class="c1">#value of the first item in the array (1). The result here is 1+1+1=3. </span>
</span><span class='line'><span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="o">].</span><span class="n">inject</span><span class="p">()</span> <span class="p">{</span><span class="o">|</span><span class="n">sum</span><span class="p">,</span> <span class="n">value</span><span class="o">|</span> <span class="n">sum</span><span class="o">+</span><span class="n">value</span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#This will give you the product of the injected 0x1x1x1=0</span>
</span><span class='line'><span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="o">].</span><span class="n">inject</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="p">{</span><span class="o">|</span><span class="n">product</span><span class="p">,</span> <span class="n">value</span><span class="o">|</span> <span class="n">product</span><span class="o">*</span><span class="n">value</span><span class="p">}</span>
</span><span class='line'><span class="c1">#This will give you the product of the injected 1x1x1x1=1</span>
</span><span class='line'><span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="o">].</span><span class="n">inject</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span><span class="o">|</span><span class="n">product</span><span class="p">,</span> <span class="n">value</span><span class="o">|</span> <span class="n">product</span><span class="o">*</span><span class="n">value</span><span class="p">}</span>
</span><span class='line'><span class="c1">#This will give you the product of the first value of the</span>
</span><span class='line'><span class="c1">#arrayx1x1=1</span>
</span><span class='line'><span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="o">].</span><span class="n">inject</span><span class="p">()</span> <span class="p">{</span><span class="o">|</span><span class="n">product</span><span class="p">,</span> <span class="n">value</span><span class="o">|</span> <span class="n">product</span><span class="o">*</span><span class="n">value</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>So what does inject do?</h2>

<ol>
<li>The first argument of the block takes the value of the variable passed to inject (the injected variable) initially</li>
<li>After performing the block&rsquo;s operation the result is stored in that same variable and at the end that final stored value is returned</li>
<li>If you don&rsquo;t pass in a value to inject, the first argument of the block will initially take on the value of the first index in the array.</li>
</ol>


<p>Read some more here: <a href="http://ruby-doc.org/core-2.1.3/Enumerable.html#method-i-inject">http://ruby-doc.org/core-2.1.3/Enumerable.html#method-i-inject</a></p>

<h2>It can be made even shorter</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">#This is equivalent to [1,1,1].inject(0) {|sum, value| sum+value} </span>
</span><span class='line'><span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="o">].</span><span class="n">inject</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="ss">:+</span><span class="p">)</span>
</span><span class='line'><span class="no">OR</span>
</span><span class='line'><span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="o">].</span><span class="n">inject</span><span class="p">(</span><span class="ss">:+</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>The first argument is the injection, the second is calling on the symbol for the operator +. Symbol references to methods are also acceptable arguments for inject.</p>

<h2>Summary</h2>

<p>Instead of</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">sum</span><span class="o">=</span><span class="mi">0</span>
</span><span class='line'><span class="n">array</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="p">{</span><span class="o">|</span><span class="n">value</span><span class="o">|</span> <span class="n">sum</span><span class="o">+=</span><span class="n">value</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can do this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">array</span><span class="o">.</span><span class="n">inject</span><span class="p">(</span><span class="ss">:+</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h3>#inject and #reduce are the same method. I imagine reduce refering the to the collapsing of the array via the given block into one value</h3>
]]></content>
  </entry>
  
</feed>
