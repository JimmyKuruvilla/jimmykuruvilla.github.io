<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Not A Programming Joke]]></title>
  <link href="http://jimmykuruvilla.github.io/atom.xml" rel="self"/>
  <link href="http://jimmykuruvilla.github.io/"/>
  <updated>2014-10-16T21:45:20-04:00</updated>
  <id>http://jimmykuruvilla.github.io/</id>
  <author>
    <name><![CDATA[Jimmy Kuruvilla]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Ruby: Inject/Reduce Method]]></title>
    <link href="http://jimmykuruvilla.github.io/blog/2014/10/08/testing/"/>
    <updated>2014-10-08T21:54:40-04:00</updated>
    <id>http://jimmykuruvilla.github.io/blog/2014/10/08/testing</id>
    <content type="html"><![CDATA[<h4>Ruby has an Enumerable method called inject and it makes summing or getting the product of an array of values a snap. Below are some extended examples of it in use:</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">#&#39;injects&#39; 0 in for sum before we start summing so </span>
</span><span class='line'><span class="c1">#the result is 1+1+1</span>
</span><span class='line'><span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="o">].</span><span class="n">inject</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="p">{</span><span class="o">|</span><span class="n">sum</span><span class="p">,</span> <span class="n">value</span><span class="o">|</span> <span class="n">sum</span><span class="o">+</span><span class="n">value</span><span class="p">}</span>
</span><span class='line'><span class="c1">#&#39;injects&#39; a value of 1 in for sum before we start summing so </span>
</span><span class='line'><span class="c1">#the result is 1+1+1+1=4</span>
</span><span class='line'><span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="o">].</span><span class="n">inject</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span><span class="o">|</span><span class="n">sum</span><span class="p">,</span> <span class="n">value</span><span class="o">|</span> <span class="n">sum</span><span class="o">+</span><span class="n">value</span><span class="p">}</span>
</span><span class='line'><span class="c1">#nothing injected, so the first argument (sum) takes the </span>
</span><span class='line'><span class="c1">#value of the first item in the array (1). The result here is 1+1+1=3. </span>
</span><span class='line'><span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="o">].</span><span class="n">inject</span><span class="p">()</span> <span class="p">{</span><span class="o">|</span><span class="n">sum</span><span class="p">,</span> <span class="n">value</span><span class="o">|</span> <span class="n">sum</span><span class="o">+</span><span class="n">value</span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#This will give you the product of the injected 0x1x1x1=0</span>
</span><span class='line'><span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="o">].</span><span class="n">inject</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="p">{</span><span class="o">|</span><span class="n">product</span><span class="p">,</span> <span class="n">value</span><span class="o">|</span> <span class="n">product</span><span class="o">*</span><span class="n">value</span><span class="p">}</span>
</span><span class='line'><span class="c1">#This will give you the product of the injected 1x1x1x1=1</span>
</span><span class='line'><span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="o">].</span><span class="n">inject</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span><span class="o">|</span><span class="n">product</span><span class="p">,</span> <span class="n">value</span><span class="o">|</span> <span class="n">product</span><span class="o">*</span><span class="n">value</span><span class="p">}</span>
</span><span class='line'><span class="c1">#This will give you the product of the first value of the</span>
</span><span class='line'><span class="c1">#arrayx1x1=1</span>
</span><span class='line'><span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="o">].</span><span class="n">inject</span><span class="p">()</span> <span class="p">{</span><span class="o">|</span><span class="n">product</span><span class="p">,</span> <span class="n">value</span><span class="o">|</span> <span class="n">product</span><span class="o">*</span><span class="n">value</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>So what does inject do?</h2>

<ol>
<li>The first argument of the block takes the value of the variable passed to inject (the injected variable) initially</li>
<li>After performing the block&rsquo;s operation the result is stored in that same variable and at the end that final stored value is returned</li>
<li>If you don&rsquo;t pass in a value to inject, the first argument of the block will initially take on the value of the first index in the array.</li>
</ol>


<p>Read some more here: <a href="http://ruby-doc.org/core-2.1.3/Enumerable.html#method-i-inject">http://ruby-doc.org/core-2.1.3/Enumerable.html#method-i-inject</a></p>

<h2>It can be made even shorter</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">#This is equivalent to [1,1,1].inject(0) {|sum, value| sum+value} </span>
</span><span class='line'><span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="o">].</span><span class="n">inject</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="ss">:+</span><span class="p">)</span>
</span><span class='line'><span class="no">OR</span>
</span><span class='line'><span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="o">].</span><span class="n">inject</span><span class="p">(</span><span class="ss">:+</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>The first argument is the injection, the second is calling on the symbol for the operator +. Symbol references to methods are also acceptable arguments for inject.</p>

<h2>Summary</h2>

<p>Instead of</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">sum</span><span class="o">=</span><span class="mi">0</span>
</span><span class='line'><span class="n">array</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="p">{</span><span class="o">|</span><span class="n">value</span><span class="o">|</span> <span class="n">sum</span><span class="o">+=</span><span class="n">value</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can do this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">array</span><span class="o">.</span><span class="n">inject</span><span class="p">(</span><span class="ss">:+</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h3>#inject and #reduce are the same method. I imagine reduce refering the to the collapsing of the array via the given block into one value</h3>
]]></content>
  </entry>
  
</feed>
