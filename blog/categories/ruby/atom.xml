<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ruby | Not A Programming Joke]]></title>
  <link href="http://JimmyKuruvilla.github.io/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://JimmyKuruvilla.github.io/"/>
  <updated>2014-12-16T21:43:26-05:00</updated>
  <id>http://JimmyKuruvilla.github.io/</id>
  <author>
    <name><![CDATA[Jimmy Kuruvilla]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Ruby: Inject/Reduce Method]]></title>
    <link href="http://JimmyKuruvilla.github.io/blog/2014/10/08/testing/"/>
    <updated>2014-10-08T21:54:40-04:00</updated>
    <id>http://JimmyKuruvilla.github.io/blog/2014/10/08/testing</id>
    <content type="html"><![CDATA[<h4>Ruby has an Enumerable method called inject and it makes summing or getting the product of an array of values a snap. Below are some extended examples of it in use:</h4>

<pre><code class="ruby">#'injects' 0 in for sum before we start summing so 
#the result is 1+1+1
[1,1,1].inject(0) {|sum, value| sum+value} 
#'injects' a value of 1 in for sum before we start summing so 
#the result is 1+1+1+1=4
[1,1,1].inject(1) {|sum, value| sum+value} 
#nothing injected, so the first argument (sum) takes the 
#value of the first item in the array (1). The result here is 1+1+1=3. 
[1,1,1].inject() {|sum, value| sum+value} 

#This will give you the product of the injected 0x1x1x1=0
[1,1,1].inject(0) {|product, value| product*value} 
#This will give you the product of the injected 1x1x1x1=1
[1,1,1].inject(1) {|product, value| product*value} 
#This will give you the product of the first value of the
#arrayx1x1=1
[1,1,1].inject() {|product, value| product*value} 
</code></pre>

<h2>So what does inject do?</h2>

<ol>
<li>The first argument of the block takes the value of the variable passed to inject (the injected variable) initially</li>
<li>After performing the block&rsquo;s operation the result is stored in that same variable and at the end that final stored value is returned</li>
<li>If you don&rsquo;t pass in a value to inject, the first argument of the block will initially take on the value of the first index in the array.</li>
</ol>


<p>Read some more here: <a href="http://ruby-doc.org/core-2.1.3/Enumerable.html#method-i-inject">http://ruby-doc.org/core-2.1.3/Enumerable.html#method-i-inject</a></p>

<h2>It can be made even shorter</h2>

<pre><code>#This is equivalent to [1,1,1].inject(0) {|sum, value| sum+value} 
[1,1,1].inject(0,:+) 
OR
[1,1,1].inject(:+) 
</code></pre>

<p>The first argument is the injection, the second is calling on the symbol for the operator +. Symbol references to methods are also acceptable arguments for inject.</p>

<h2>Summary</h2>

<p>Instead of
<code>
sum=0
array.each do {|value| sum+=value}
</code></p>

<p>You can do this:</p>

<pre><code>array.inject(:+)
</code></pre>

<h3>#inject and #reduce are the same method. I imagine reduce refering the to the collapsing of the array via the given block into one value</h3>
]]></content>
  </entry>
  
</feed>
